-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity example is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    gmii_0_rx_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    gmii_0_rx_TVALID : IN STD_LOGIC;
    gmii_0_rx_TREADY : OUT STD_LOGIC;
    gmii_0_tx_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    gmii_0_tx_TVALID : OUT STD_LOGIC;
    gmii_0_tx_TREADY : IN STD_LOGIC;
    gmii_1_rx_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    gmii_1_rx_TVALID : IN STD_LOGIC;
    gmii_1_rx_TREADY : OUT STD_LOGIC;
    gmii_1_tx_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    gmii_1_tx_TVALID : OUT STD_LOGIC;
    gmii_1_tx_TREADY : IN STD_LOGIC );
end;


architecture behav of example is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "example,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-2,HLS_INPUT_CLOCK=13.333300,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3,HLS_SYN_LUT=9}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_18 : BOOLEAN;
    signal gmii_0_rx_TDATA_blk_n : STD_LOGIC;
    signal gmii_0_tx_TDATA_blk_n : STD_LOGIC;
    signal gmii_1_rx_TDATA_blk_n : STD_LOGIC;
    signal gmii_1_tx_TDATA_blk_n : STD_LOGIC;
    signal ap_sig_47 : BOOLEAN;
    signal ap_sig_ioackin_gmii_1_tx_TREADY : STD_LOGIC;
    signal ap_sig_ioackin_gmii_0_tx_TREADY : STD_LOGIC;
    signal ap_reg_ioackin_gmii_1_tx_TREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmii_0_tx_TREADY : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_81 : BOOLEAN;
    signal ap_sig_83 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmii_0_tx_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmii_0_tx_TREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then
                    if (not((ap_sig_47 or (ap_const_logic_0 = ap_sig_ioackin_gmii_1_tx_TREADY) or (ap_const_logic_0 = ap_sig_ioackin_gmii_0_tx_TREADY)))) then 
                        ap_reg_ioackin_gmii_0_tx_TREADY <= ap_const_logic_0;
                    elsif (ap_sig_81) then 
                        ap_reg_ioackin_gmii_0_tx_TREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmii_1_tx_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmii_1_tx_TREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then
                    if (not((ap_sig_47 or (ap_const_logic_0 = ap_sig_ioackin_gmii_1_tx_TREADY) or (ap_const_logic_0 = ap_sig_ioackin_gmii_0_tx_TREADY)))) then 
                        ap_reg_ioackin_gmii_1_tx_TREADY <= ap_const_logic_0;
                    elsif (ap_sig_83) then 
                        ap_reg_ioackin_gmii_1_tx_TREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_47, ap_sig_ioackin_gmii_1_tx_TREADY, ap_sig_ioackin_gmii_0_tx_TREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    ap_done_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_47, ap_sig_ioackin_gmii_1_tx_TREADY, ap_sig_ioackin_gmii_0_tx_TREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_sig_47 or (ap_const_logic_0 = ap_sig_ioackin_gmii_1_tx_TREADY) or (ap_const_logic_0 = ap_sig_ioackin_gmii_0_tx_TREADY))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_47, ap_sig_ioackin_gmii_1_tx_TREADY, ap_sig_ioackin_gmii_0_tx_TREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_sig_47 or (ap_const_logic_0 = ap_sig_ioackin_gmii_1_tx_TREADY) or (ap_const_logic_0 = ap_sig_ioackin_gmii_0_tx_TREADY))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_18_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_18 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_47_assign_proc : process(ap_start, gmii_0_rx_TVALID, gmii_1_rx_TVALID)
    begin
                ap_sig_47 <= ((gmii_0_rx_TVALID = ap_const_logic_0) or (gmii_1_rx_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_sig_81_assign_proc : process(gmii_0_tx_TREADY, ap_sig_47)
    begin
                ap_sig_81 <= (not(ap_sig_47) and (ap_const_logic_1 = gmii_0_tx_TREADY));
    end process;


    ap_sig_83_assign_proc : process(gmii_1_tx_TREADY, ap_sig_47)
    begin
                ap_sig_83 <= (not(ap_sig_47) and (ap_const_logic_1 = gmii_1_tx_TREADY));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_18)
    begin
        if (ap_sig_18) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_gmii_0_tx_TREADY_assign_proc : process(gmii_0_tx_TREADY, ap_reg_ioackin_gmii_0_tx_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmii_0_tx_TREADY)) then 
            ap_sig_ioackin_gmii_0_tx_TREADY <= gmii_0_tx_TREADY;
        else 
            ap_sig_ioackin_gmii_0_tx_TREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmii_1_tx_TREADY_assign_proc : process(gmii_1_tx_TREADY, ap_reg_ioackin_gmii_1_tx_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmii_1_tx_TREADY)) then 
            ap_sig_ioackin_gmii_1_tx_TREADY <= gmii_1_tx_TREADY;
        else 
            ap_sig_ioackin_gmii_1_tx_TREADY <= ap_const_logic_1;
        end if; 
    end process;


    gmii_0_rx_TDATA_blk_n_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, gmii_0_rx_TVALID)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            gmii_0_rx_TDATA_blk_n <= gmii_0_rx_TVALID;
        else 
            gmii_0_rx_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    gmii_0_rx_TREADY_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_47, ap_sig_ioackin_gmii_1_tx_TREADY, ap_sig_ioackin_gmii_0_tx_TREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_sig_47 or (ap_const_logic_0 = ap_sig_ioackin_gmii_1_tx_TREADY) or (ap_const_logic_0 = ap_sig_ioackin_gmii_0_tx_TREADY))))) then 
            gmii_0_rx_TREADY <= ap_const_logic_1;
        else 
            gmii_0_rx_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    gmii_0_tx_TDATA <= gmii_1_rx_TDATA;

    gmii_0_tx_TDATA_blk_n_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, gmii_0_tx_TREADY)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            gmii_0_tx_TDATA_blk_n <= gmii_0_tx_TREADY;
        else 
            gmii_0_tx_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    gmii_0_tx_TVALID_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_47, ap_reg_ioackin_gmii_0_tx_TREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_47) and (ap_const_logic_0 = ap_reg_ioackin_gmii_0_tx_TREADY))) then 
            gmii_0_tx_TVALID <= ap_const_logic_1;
        else 
            gmii_0_tx_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmii_1_rx_TDATA_blk_n_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, gmii_1_rx_TVALID)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            gmii_1_rx_TDATA_blk_n <= gmii_1_rx_TVALID;
        else 
            gmii_1_rx_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    gmii_1_rx_TREADY_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_47, ap_sig_ioackin_gmii_1_tx_TREADY, ap_sig_ioackin_gmii_0_tx_TREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_sig_47 or (ap_const_logic_0 = ap_sig_ioackin_gmii_1_tx_TREADY) or (ap_const_logic_0 = ap_sig_ioackin_gmii_0_tx_TREADY))))) then 
            gmii_1_rx_TREADY <= ap_const_logic_1;
        else 
            gmii_1_rx_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    gmii_1_tx_TDATA <= gmii_0_rx_TDATA;

    gmii_1_tx_TDATA_blk_n_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, gmii_1_tx_TREADY)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            gmii_1_tx_TDATA_blk_n <= gmii_1_tx_TREADY;
        else 
            gmii_1_tx_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    gmii_1_tx_TVALID_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_47, ap_reg_ioackin_gmii_1_tx_TREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_47) and (ap_const_logic_0 = ap_reg_ioackin_gmii_1_tx_TREADY))) then 
            gmii_1_tx_TVALID <= ap_const_logic_1;
        else 
            gmii_1_tx_TVALID <= ap_const_logic_0;
        end if; 
    end process;

end behav;
